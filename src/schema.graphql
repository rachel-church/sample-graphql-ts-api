input NumberWhereInput {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  greaterThan: Float
  greaterThanOrEqualTo: Float
}

input StringWhereInput {
  equalTo: String
  notEqualTo: String
  exists: Boolean
  matchesRegex: String
}

input EmployeeWhereInput {
  age: NumberWhereInput
  id: StringWhereInput
}

input EmployeeUpdateFields {
  firstName: String, lastName: String, age: Int, managerId: String
}

type Employee {
  id: ID!
  firstName: String!
  lastName: String!
  age: Float
  manager: Employee
}

type Query {
  employee(id: ID!): Employee
  employees(where: EmployeeWhereInput, skip: Int, limit: Int): [Employee!]!
}

type Mutation {
  createEmployee(fields: EmployeeUpdateFields! ): Employee
  updateEmployee(id: String!, fields: EmployeeUpdateFields! ): Employee
}
